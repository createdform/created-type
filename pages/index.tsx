import { Player } from "@remotion/player";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useLambda } from "../hooks/useLambda";
import { MyComposition } from "../remotion/MyComp/Composition";
import { defaultMyCompProps } from "../types/MyComp";
import StepperInput from '../components/StepperInput';
import useVideoMakerStore from '../store/useVideoMakerStore';

const Home: NextPage = () => {
  const state = useVideoMakerStore();


  const { renderMedia, progress, status, price, url, renderId } = useLambda("MyComp", state);
  return (
    <div className="h-screen bg-blue-400 overflow-hidden" style={{overflow: 'hidden'}}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full bg-blue-600 h-1/2">
      <div className="max-w-screen-md m-auto mb-20">
        <Player
          component={MyComposition}
          inputProps={state}
          durationInFrames={state.duration > 0 ? state.duration : 30}
          fps={30}
          compositionHeight={1080}
          compositionWidth={1920}
          style={{ width: "100%" }}
          controls
          autoPlay
          loop
        />
          <div className="flex items-center justify-center mt-12">
            <StepperInput setText={state.setText} text={state.text}/>

            <div className=" flex flex-col items-center">
            <button
              onClick={renderMedia}
              disabled={status === "rendering"}
              className="rounded-lg bg-blue-400 text-white uppercase px-4 py-2 m-2 disabled:bg-gray-400"
            >
              Render
            </button>
            {status && (
              <div className="w-full items-center flex flex-col">
                <p
                  className={`uppercase text-xl font-bold  ${
                    status === "done"
                      ? "text-green-500"
                      : status === "error"
                      ? "text-red-500"
                      : "text-blue-500"
                  }`}
                >
                  {status}
                </p>
                <div className="h-8 w-full bg-gray-500 rounded-full overflow-hidden relative">
                  <div
                    className="h-full left-0 top-0 bg-green-400"
                    style={{ width: `${(progress ?? 0) * 100}%` }}
                  ></div>
                </div>
                <p>Price: {price}</p>
                {status !== "rendering" && (
                  <div className="text-green-500 space-x-4 uppercase">
                    <a href={url} target="_blank" rel="noreferrer" className="">
                      Open
                    </a>
                    <a href={url} target="_blank" rel="noreferrer" download={renderId}>
                      Download
                    </a>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
    </div>
  );
};

export default Home;
